package jpabook.japshop.domain.전체적개념설명;

public class 양방향설계와단방향설계 {

    /**
     * 단방향설계
     * 테이블의 경우 외래키 FK 만으로 연관관계를 맺고 관련 정보를 읽어드릴 수 있도록 설계되어 있지만
     * 객체는 그렇지 않다. 따라서, 비지니스 로직상 (가령 , 예를 들면 셀렉해서 조회하여 데이터를 가져오는 일련의 과정들)
     * 한 쪽의 값만 들고오도록 단 방향 설계만이 가능한데,
     * 이 것을 테이블 처럼 양방향 설계로 바꾸려면 Object A - > Object B 로 연관관계를 맺고
     * Object B -> Object A 로 연관관계를 한번 더 맺어서
     * 단 방향 + 단 방향을 만들어 양방향 관계처럼 보이게 한다.
     *
     * 다만, 실무에 가면 복잡한 관계를 가지기 때문에 되도록이면 단방향 설계를 하는 것이 중요하다.
     * 단, 연관관계의 주인이 있는 객체의 경우 (외래키 관리하는 객체) 는 CRUD 가 가능하지만,
     * 반대편의 경우 단순 조회만 가능하다 (mappedBy 가 존재하는 객체)
     * 이 때 외래키는 N 에 존재하여아하며, 이유는
     * 테이블 구조상 생각해보면 외래키는 당연히 N 에 존재하여야 한다.
     * 예를 들면,
     * 1 Member = N Order 가 있을 경우에
     * Member 테이블의 로우 1개 당 Order외래키가 여러개 존재하려면
     * Member 의 ID 값이 유니크하지 못하게 된다.
     * 이러한 점 때문에 외래키는 N 에 존재하여야 한다.
     * 이 때 관리의 용이성을 위해 외래키가 있는 테이블에 연관관계의 주인을 주는 것이다.
     *
     */
}
